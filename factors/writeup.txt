COMP 321 Project 1: Factors
Tyra Cole (tjc6)

---(Do not write lines of text that exceed the width of this line.)------------

DESIGN DESCRIPTION

count_factors_recursive:

	This function has one helper function, smallest_prime_factor(n, i),
	that is a recursive function that returns the first prime factor 
	of "n" by checking to see if "i", a prime number, is equal to "n"
	or if "i" is a factor of "n". If "i" equals "n", the function
	returns "n". If "n % i" equals 0, the function returns "i". 
	Otherwise, the function gets called again:
	smallest_prime_factor(n, i+1). 
	
	The return value of smallest_prime_factor is used to determine what
	action should be taken for the prime factor count. If
	smallest_prime_factor returns "n", then count_factors_recursive 
	returns 1 because it has found a prime number. Otherwise, we are
	left with a situation where we have a composite number with a prime
	factor and a composite factor. To account for this,
	count_factors_recursive returns the sum of calling itself on the
	prime factor plus calling itself on the composite factor, which is
	found by dividing "n" by the prime factor.

count_factors:

	For any even integer, 2 is the only prime factor. So, this
	function starts by factoring out 2 from "n" until "n" is odd. This
	is done with a while loop, with each iteration of the while loop 
	adding 1 to the total count, "count" of prime factors of "n".
	
	Next, we must find all of the odd prime factors of "n", if any. This
	is done by having a for loop that starts at 3, ends at
	sqrt(n)+1 (this logic comes from the Sieve of Eratothenes algorithm),
	and increasing by 2 for each iteration (because we only have to
	consider odd integers now. Similar to how we factored out 2, a while 
	loop is used to factor out the current odd integer, "i" from "n"
	until it can no longer be factored out, with each iteration through
	the while loop adding 1 to the total count. After the while loop is
	exited, we return to the for loop that moves on to the next odd 
	number, and the process repeats until the upper bound of the for 
	loop is reached.
	
	Lastly, if the remaining value of "n" following all of the previous
	factoring out is greater than 2, it itself is prime and must be
	accounted for in the total count.


count_distinct_factors:

	This function follows logic similar to count_factors, except now
	count_distinct factors has a counter for the number of distinct 
	factors in addition to a counter used to count the number of times
	an individual factor is factored out of "n". 
	
	Before factoring out 2, "count" is set to 0; and just like with
	count_factors, each iteration of the even while loop adds one to
	"count". After completion of the while loop, if "count" is greater
	than 0, 1 is added to the distinct factor counter, "dist", because
	we have found one distinct prime factor.
	
	The same process count_factors uses to factor out odd primes is 
	used here. Except now, "count" is reset to 0 before each
	execution of the while loop. After the while loop is completed,
	if "count" is greater than 0, 1 is added to the distinct factor 
	counter, "dist", because we have found one distinct prime factor.
	
	Lastly, if the remaining value of "n" following all of the previous
	factoring out is greater than 2, it itself is a distinct prime factor
	and must be accounted for in the total distinct factor count.
	                                


TESTING STRATEGY

I tested my code by writing a series of test cases as follows:

count_factors_recursive:

	1. Test composite number with only even prime factors.
		Input: 128
		Explanation: 128 is 2^7, so this was used to see if
		count_factors_recursive would count all of the 2s that were
		factored out of 128.
	2. Test composite number with only odd prime factors.
	        Input: 1155
	        Explanation: Test to see if count_factors_recursive accurately
	        counts all odd factors of an integer. In this case, 3, 5, 7,
	        and 11.
	3. Test composite number with both even and odd prime factors.
		Input: 280
	        Explanation: Test to see if count_factors_recursive accurately 
	        counts all prime factors when there is both even and odd prime
	        factors, such as with the number 280: 2, 2, 2, 5, 7.
	4. Test on a square number.
		Input: 49
		Explanation: Test to see if count_factors_recursive returns 2 
		when given a number that is the square value of a prime number.
		In this case, 49 has 2 prime factors, both of which are 7.
	5. Test on small prime number.
		Input: 2
		Explanation: Test to see if count_factors_recursive returns 1
		when given a small prime number. This test is used along with 
		test #6 to test the range at which this function can perform.
	6. Test on large prime number.
		Input: 5011
		Explanation: Test to see if count_factors_recursive returns 1
		when given a larger prime numbe.r This test is used along with
		test #5 to test the range at which this function can perform.

** Because smallest_prime_factor is a helper function for count_factors recursive,
testing count_factors_recursive is sufficient enough for testing of
smallest_prime_factor.		
		
count_factors:
	
	1. Test composite number with only even prime factors.
		Input: 128
		Explanation: 128 is 2^7, so this was used to see if
		count_factors_recursive would count all of the 2s that were
		factored out of 128.                                          	                                                   
	2. Test composite number with only odd prime factors.
        	Input: 1155
        	Explanation: Test to see if count_factors_recursive accurately
        	counts all odd factors of an integer. In this case, 3, 5, 7,
        	and 11.
        3. Test composite number with both even and odd prime factors.
        	Input: 280
        	Explanation: Test to see if count_factors_recursive accurately
        	counts all prime factors when there is both even and odd prime
        	factors, such as with the number 280: 2, 2, 2, 5, 7.
        4. Test on a square number.
        	Input: 49
        	Explanation: Test to see if count_factors_recursive returns 2
        	when given a number that is the square value of a prime number.
        	In this case, 49 has 2 prime factors, both of which are 7.
        5. Test on small prime number.
        	Input: 2
        	Explanation: Test to see if count_factors_recursive returns 1
        	when given the smallest prime number. This test is used along 
        	with test #6 to test the range at which this function can perform.
        6. Test on large prime number.
        	Input: 112363
        	Explanation: Test to see if count_factors_recursive returns 1
        	when given a larger prime numbe.r This test is used along with
        	test #5 to test the range at which this function can perform.                           	
        7. Test on largest unsigned integer.
        	Input: UNIT_MAX
        	Explanation: Test to see if count_factors_recursive returns the
        	correct amount of distinct prime factors when given the largest 
        	unsigned integer. This test is used along with tests 5 and 6 to 
        	test the range at which this function can perform.
                                                                                                
count_distinct_factors:
	1. Test on integer with only one even distinct prime fatcor.
		Input: 128
		Explanation: Test to see if count_distinct_factors does not
		count any duplicates of 2 when given an integer with 2 as its
		only prime factors.
	2. Test on integer with only one odd distinct prime factor.
		Input: 243
		Explanation: Test to see if count_distinct_factors does not
		count any duplicates of an odd prime factor that is the only
		prime factor of the input integer. In this case, 3^5 = 243 has
		only 1 distinct prime factor, 3. 
	3. Test on integer with both even and odd distinct prime factors.
		Input: 280
		Explanation: Test to see if count_distinct_factors accurately
		counts the number of distinct factors in an integer that has both
		even add odd prime factors. In this case, the function should
		return 3 for factors 2, 5, and 7.
	4. Test on integer with all distinct prime factors.
		Input: UNIT_MAX
		Explanation: Tests that count_distinct_factors accurately counts
		the number of distinct prime factors when given an integer whose
		prime factorization consists of only singular, distinct values.
		In this case, there are 5: 3, 5, 17, 257, 65537.
	5. Test on largest unsigned integer.
		Input: UNIT_MAX
		Explanation: Tests the range of count_distinct_factors by testing
		it on the maximum unsigned integer value to see if it returns the 
		correct number of distinct prime factors: 5.
